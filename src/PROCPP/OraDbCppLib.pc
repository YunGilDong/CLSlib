//------------------------------------------------------------------------------
// Include
//------------------------------------------------------------------------------
#include <stdio.h>
#include <string.h>
#include "General.h"
#include "Database.h"
#include <sqlca.h>
#include <oraca.h>

//------------------------------------------------------------------------------
// Local
//------------------------------------------------------------------------------
EXEC ORACLE OPTION(ORACA = YES);	
EXEC ORACLE OPTION(RELEASE_CURSOR = YES);
//------------------------------------------------------------------------------
// DBError
//------------------------------------------------------------------------------
void DBError(void)
{
	printf("%.*s\n", sqlca.sqlerrm.sqlerrml, sqlca.sqlerrm.sqlerrmc);
	EXEC SQL WHENEVER SQLERROR CONTINUE;
}
//------------------------------------------------------------------------------
// DBaseConnect_cpp
//------------------------------------------------------------------------------
int DBaseConnect_cpp(char *user, char *pwd, char *alias)
{
	EXEC SQL BEGIN DECLARE SECTION;
		char *pUsername = user, *pPassword = pwd, *pAlias = alias;
	EXEC SQL END DECLARE SECTION;

	oraca.orastxtf = ORASTFERR;
	EXEC SQL WHENEVER SQLERROR DO DBError();
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL CONNECT :pUsername IDENTIFIED BY :pPassword USING :pAlias;
	return ((sqlca.sqlcode < 0) ? -1 : 0);
}
//------------------------------------------------------------------------------
// DBaseDisconnect_cpp
//------------------------------------------------------------------------------
int DBaseDisconnect_cpp(void)
{
	EXEC SQL COMMIT WORK RELEASE;
	return ((sqlca.sqlcode < 0) ? 0 : 1);
}

//------------------------------------------------------------------------------ 
// DBSelectTest_cpp
//------------------------------------------------------------------------------ 
int DBSelectTest_cpp(DB_YGD *pInfo, int maxEntry)
{
	printf("DBSelectTest[0]\n");
	int count = 0;
	
	EXEC SQL BEGIN DECLARE SECTION;
		typedef struct
		{
			int ISPT_EQUIP_ID;
			char ISPT_EQUIP_NM[60];
			int ISPT_EQUIP_TP;
			char ISPT_OFFICE_ID[8];
		} DB_YGD_;
		DB_YGD_ *ptr = (DB_YGD_*)pInfo;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE csTEST CURSOR FOR
		SELECT ISPT_EQUIP_ID, ISPT_EQUIP_NM, ISPT_EQUIP_TP, ISPT_OFFICE_ID
		FROM ISPT_EQUIP
		ORDER BY ISPT_EQUIP_ID;

	EXEC SQL OPEN csTEST;
	for (count = 0; count < maxEntry; ptr++)
	{
		EXEC SQL FETCH csTEST INTO :ptr;
		if (sqlca.sqlcode == 1403)
			break;
		printf("##%d %s %d %s %s\n",ptr->ISPT_EQUIP_ID, ptr->ISPT_EQUIP_NM, ptr->ISPT_EQUIP_TP, ptr->ISPT_OFFICE_ID);
		count++;
	}
	EXEC SQL CLOSE csTEST;	
	return (count);
}
//------------------------------------------------------------------------------ 
// DBGetEquip_cpp
//------------------------------------------------------------------------------ 
int DBGetEquip_cpp(DB_EQUIP *pInfo, int maxEntry)
{
	int count = 0;
	
	EXEC SQL BEGIN DECLARE SECTION;
		typedef struct
		{
			int ISPT_EQUIP_ID;			// Ispt Equip ID
			char ISPT_EQUIP_NM[60];		// Ispt Eqiup Name
			int ISPT_EQUIP_TP;			// Ispt Equip Type
			char INSTALL_DT[20];	
			int ISPT_LANE;
			char ISPT_OFFICE_ID[8];
			char IP_ADDR[46];
		} DB_EQUIP_;
		DB_EQUIP_ *ptr = (DB_EQUIP_*)pInfo;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL DECLARE csEQUIP CURSOR FOR
		SELECT ISPT_EQUIP_ID, ISPT_EQUIP_NM, ISPT_EQUIP_TP, INSTALL_DT, ISPT_LANE, ISPT_OFFICE_ID, IP_ADDR
		FROM ISPT_EQUIP
		ORDER BY ISPT_EQUIP_ID;
	
	EXEC SQL OPEN csEQUIP;
	for (count = 0; count < maxEntry; ptr++)			
	{
		EXEC SQL FETCH csEQUIP INTO :ptr;
		if (sqlca.sqlcode == 1403)
			break;

//		printf("##%d %s %d %s %s %s\n"
//		,ptr->ISPT_EQUIP_ID, ptr->ISPT_EQUIP_NM, ptr->ISPT_EQUIP_TP, ptr->ISPT_OFFICE_ID, ptr->IP_ADDR);
		count++;
	}
	EXEC SQL CLOSE csEQUIP;
	return (count);
}
