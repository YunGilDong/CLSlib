//------------------------------------------------------------------------------
// Include
//------------------------------------------------------------------------------
#include "OraDbLib.h"
//------------------------------------------------------------------------------
// Local Variable
//------------------------------------------------------------------------------
EXEC ORACLE OPTION(ORACA = YES);		// oraca를 사용하기 위함
EXEC ORACLE OPTION(RELEASE_CURSOR = YES);	// Control release of cursors from cursor cache
//------------------------------------------------------------------------------
// DBaseLogging
//------------------------------------------------------------------------------
void DBaseLogging(const char *msg)
{
	int length;
	char filename[FILENAME_LEN];
	char msgBuf[BUFFER_LEN];
	char timeStamp[BUFFER_LEN];
	FILE *fp;
	struct tm tod;

	printf("[0]\n");
	//메시지 확인
	if ((length = strlen(msg)) <= 0)
		return ;
	printf("[1]\n");
	DBGetTimeString(&tod, timeStamp);
	printf("[2]\n");
	// 파일 저장
	sprintf(msgBuf, "%s %s \n", timeStamp, msg);
	sprintf(filename, "%sORA_%04d%02d%02d.log", DIR_LOG, tod.tm_year + 1900, tod.tm_mon + 1, tod.tm_mday);
	printf("@%s\n", filename);
	printf("@%s\n", msgBuf);
	if ((fp = fopen(filename, "a+")) == NULL)
		return;

	printf("[3]\n");
	fwrite(msgBuf, 1, strlen(msgBuf), fp);
	fclose(fp);
}
//------------------------------------------------------------------------------
// DBaseError
//------------------------------------------------------------------------------
void DBaseError(void)
{	
	char msgbuf[512];	
	char msgbuf2[512];
	size_t msgbuf_len, msg_len;	
	
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	msgbuf_len = sizeof(msgbuf);
	sqlglm(msgbuf, &msgbuf_len, &msg_len);
	msgbuf[msg_len] = '\0';
	printf("ORA_DB ERROR: [%d] %s", sqlca.sqlcode, msgbuf);				
	EXEC SQL ROLLBACK RELEASE;		

	sprintf(msgbuf2, "ORA_DB ERROR: [%d] %s", sqlca.sqlcode, msgbuf);				
	DBaseLogging(msgbuf2);
	return;
}
//------------------------------------------------------------------------------
// fnSqlError
//------------------------------------------------------------------------------
intfnSqlError(const char *funcName)
{
	char msg[200];
	size_t bufLen, msgLen;

	bufLen = sizeof(msg);	
	sqlglm(msg, &bufLen, &msgLen);	
#if 1
	printf("[%s] CODE:%d %.*s", funcName, sqlca.sqlcode, msgLen, msg);
#endif
	
	return (sqlca.sqlcode);
}
//------------------------------------------------------------------------------
// DBaseConnect
//------------------------------------------------------------------------------
int DBaseConnect(const char *user, const char *pwd, const char *alias)
{
	oraca.orastxtf = ORASTFERR;	// Only save on SQLERROR (val : 1)
	EXEC SQL WHENEVER SQLERROR DO DBaseError();
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL CONNECT :user IDENTIFIED BY :pwd USING :alias;
	return ((sqlca.sqlcode < 0) ? -1 : 0);
}
//------------------------------------------------------------------------------
// DBaseDisconnect
//------------------------------------------------------------------------------ 
int DBaseDisconnect(void)
{
	EXEC SQL COMMIT WORK RELEASE;
	DBaseLogging("DB CLOSE");
	return ((sqlca.sqlcode < 0)? -1 : 0);
}
//------------------------------------------------------------------------------ 
// DBGenDate
//------------------------------------------------------------------------------ 
void DBGenDate(time_t clock, char *pDate)
{
	struct tm *pTOD;

	pTOD = localtime(&clock);
	sprintf(pDate, "%04d%02d%02d%02d%02d%02d",
		pTOD->tm_year + 1900, pTOD->tm_mon + 1, pTOD->tm_mday, pTOD->tm_hour, pTOD->tm_min, pTOD->tm_sec);
}
//------------------------------------------------------------------------------
// DBGetTimeString
//------------------------------------------------------------------------------
void DBGetTimeString(struct tm *pTod, char *m_timeStamp)
{
	//char m_timeStamp[BUFFER_LEN];
	struct timeval timeVal;

	gettimeofday(&timeVal, NULL);	//현재 시간
	localtime_r(&timeVal.tv_sec, pTod);	//현재 시간(초)을 날짜 및 시간으로
	sprintf(m_timeStamp, "%04d/%02d/%02d  %02d:%02d:%02d.%03d [ORA]",
		pTod->tm_year + 1900, pTod->tm_mon + 1, pTod->tm_mday, pTod->tm_hour,
		pTod->tm_min, pTod->tm_sec, timeVal.tv_usec / 1000);
}

//------------------------------------------------------------------------------ 
// DBSelectTest
//------------------------------------------------------------------------------ 
int DBSelectTest(TEST_DB *pInfo, int maxEntry)
{
	printf("DBSelectTest[0]\n");
	int count = 0;
	char *strPtr;
	int i=0;
	EXEC SQL BEGIN DECLARE SECTION;
		TEST_DB *ptr = pInfo;
	EXEC SQL END DECLARE SECTION;

	printf("DBSelectTest[1]\n");

	EXEC SQL DECLARE csTEST CURSOR FOR
		SELECT ISPT_EQUIP_ID, ISPT_EQUIP_NM, ISPT_EQUIP_TP, ISPT_OFFICE_ID
		FROM ISPT_EQUIP
		ORDER BY ISPT_EQUIP_ID;

	printf("DBSelectTest[2]\n");

	EXEC SQL OPEN csTEST;
	for(count = 0; count < maxEntry; ptr++)
	{
		EXEC SQL FETCH csTEST INTO :ptr;
		if (sqlca.sqlcode == 1403)
			break;			
		
		printf("ID:[%d] NM:[%.*s] TP:[%d] OFFICE_ID:[%s] sizenm:[%d]\n"
			,ptr->ISPT_EQUIP_ID, strlen(ptr->ISPT_EQUIP_NM), ptr->ISPT_EQUIP_NM, ptr->ISPT_EQUIP_TP, ptr->ISPT_OFFICE_ID, strlen(ptr->ISPT_EQUIP_NM));
		
		count++;
	}
	EXEC SQL CLOSE csTEST;
	return (count);
}
//------------------------------------------------------------------------------ 
// DBGetEquip
//------------------------------------------------------------------------------ 
int DBGetEquip(DB_EQUIP *pInfo, int maxEntry)
{
	int count = 0;
	
	EXEC SQL BEGIN DECLARE SECTION;
		DB_EQUIP *ptr = pInfo;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL DECLARE csEQUIP CURSOR FOR
		SELECT ISPT_EQUIP_ID, ISPT_EQUIP_NM, ISPT_EQUIP_TP, INSTALL_DT, ISPT_LANE, ISPT_OFFICE_ID
		FROM ISPT_EQUIP
		ORDER BY ISPT_EQUIP_ID;
	
	EXEC SQL OPEN csEQUIP;
	for (count = 0; count < maxEntry; ptr++)			
	{
		EXEC SQL FETCH csEQUIP INTO :ptr;
		if (sqlca.sqlcode == 1403)
			break;

		count++;
	}
	EXEC SQL CLOSE csEQUIP;
	return (count);
}

//------------------------------------------------------------------------------ 
// End of OraDbLib.pc
//------------------------------------------------------------------------------ 